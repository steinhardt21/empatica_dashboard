{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\empatica\\\\empatica_delivery\\\\client\\\\components\\\\Nation.js\";\nvar __jsx = React.createElement;\n\n/************************************\r\n * Component in charge of recovering from the longitude and latitude the country using\r\n * the GoogleMaps API. Subsequently these data are rendered via a table \r\n */\nimport React from 'react';\nconst urls = []; //  variable used to load the urls to execute\n\nconst dt = []; // auxiliari variable\n\nexport default class Nation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    //Create the query for each pair of longitude&latitude\n    this.props.data.downloads.map(download => // Query too Goolgle Maps API in order to get the nation\n    urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + download.latitude + \",\" + download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")); //Send request to the API\n\n    var promises = Promise.all(urls.map(url => fetch(url))); //Get results of the API and save the values\n\n    promises.then(results => Promise.all(results.map(r => r.json()))).then(res => res.map(t => {\n      dt.push(t.results[0].address_components[0].long_name);\n    })).then(this.setState({\n      loading: false,\n      data: dt\n    }));\n  }\n\n  render() {\n    // If the data are still not fetched  \n    if (this.state.loading) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }\n      }, \"loading...\");\n    } // Identification of the distinct nations related with the downloads //\n\n\n    const result = [];\n    const map = new Map();\n\n    for (const item of this.state.data) {\n      if (!map.has(item)) {\n        map.set(item, true);\n        result.push(item);\n      }\n    } // Counting the number of downloads for each country //\n\n\n    let count = 0;\n    let countNation = 0;\n    let dataNat = this.state.data;\n    let nationDownload = result.map(function (item) {\n      count = 0;\n\n      for (const it in dataNat) {\n        if (item == dataNat[it]) {\n          count = count + 1;\n        }\n      }\n\n      countNation = countNation + 1;\n      return (// New row in the table that is rendered\n        __jsx(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }\n        }, __jsx(\"th\", {\n          scope: \"row\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }\n        }, countNation), __jsx(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }\n        }, item), __jsx(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }\n        }, count))\n      );\n    });\n    return (// Render of the table with the nations involved and the downloads per each nation\n      __jsx(\"table\", {\n        id: \"dtBasicExample\",\n        className: \"table table-striped table-bordered table-sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      }, __jsx(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }, \"#\"), __jsx(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }, \"Nation\"), __jsx(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      }, \"Downloads\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }\n      }, nationDownload))\n    );\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alex/Desktop/empatica/empatica_delivery/client/components/Nation.js"],"names":["React","urls","dt","Nation","Component","constructor","props","state","loading","data","componentDidMount","downloads","map","download","push","latitude","longitude","promises","Promise","all","url","fetch","then","results","r","json","res","t","address_components","long_name","setState","render","result","Map","item","has","set","count","countNation","dataNat","nationDownload","it"],"mappings":"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","sourcesContent":["/************************************\r\n * Component in charge of recovering from the longitude and latitude the country using\r\n * the GoogleMaps API. Subsequently these data are rendered via a table \r\n */\r\n\r\nimport React from 'react'\r\n\r\nconst urls = []; //  variable used to load the urls to execute\r\nconst dt = []; // auxiliari variable\r\n\r\nexport default class Nation extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = {         \r\n                        loading: true,\r\n                        data: []\r\n                    };\r\n    }\r\n\r\ncomponentDidMount() \r\n{\r\n    //Create the query for each pair of longitude&latitude\r\n    this.props.data.downloads.map(download => (\r\n        // Query too Goolgle Maps API in order to get the nation\r\n        urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+ download.latitude + \",\"+ download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\r\n    ))  \r\n\r\n    //Send request to the API\r\n    var promises = Promise.all(urls.map(url => (\r\n        fetch(url)\r\n    )));\r\n\r\n    //Get results of the API and save the values\r\n    promises\r\n        .then((results) =>\r\n            Promise.all(results.map(r => r.json()))\r\n        )\r\n        .then((res) =>\r\n            res.map(t =>          \r\n                {dt.push(t.results[0].address_components[0].long_name)}                \r\n            ))\r\n            .then(this.setState({loading: false, data: dt}))\r\n}\r\n\r\nrender()\r\n{       \r\n    // If the data are still not fetched  \r\n    if (this.state.loading) \r\n    {return <div>loading...</div>; }\r\n\r\n\r\n    // Identification of the distinct nations related with the downloads //\r\n    const result = [];\r\n    const map = new Map();\r\n    for (const item of this.state.data) {\r\n        if(!map.has(item)){\r\n            map.set(item, true);   \r\n            result.push(\r\n                item\r\n            );\r\n        }\r\n    }\r\n\r\n    // Counting the number of downloads for each country //\r\n    let count = 0;\r\n    let countNation = 0;\r\n    let dataNat = this.state.data;\r\n    let nationDownload = result.map(function(item)\r\n    {\r\n        count = 0;\r\n        for(const it in dataNat)\r\n        {\r\n            if(item == dataNat[it])\r\n            {count = count + 1;}\r\n        }\r\n        countNation = countNation + 1;\r\n\r\n    return (    // New row in the table that is rendered\r\n                <tr>\r\n                    <th scope=\"row\">{countNation}</th>\r\n                    <td>{item}</td>\r\n                    <td>{count}</td>\r\n                </tr>\r\n            )    \r\n    })\r\n\r\n    return (\r\n        \r\n        // Render of the table with the nations involved and the downloads per each nation\r\n        <table id=\"dtBasicExample\" className=\"table table-striped table-bordered table-sm\">\r\n        <thead>\r\n        <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Nation</th>\r\n            <th scope=\"col\">Downloads</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n                {nationDownload}\r\n        </tbody>\r\n        </table>\r\n\r\n\r\n    )\r\n}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}