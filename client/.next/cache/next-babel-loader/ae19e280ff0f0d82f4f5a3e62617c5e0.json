{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\empatica\\\\empatica_delivery\\\\client\\\\components\\\\DownloadTime.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nvar countMorn = 0;\nvar countEven = 0;\nvar countAfter = 0;\nvar countNi = 0;\n\nfunction dateCompare(time1, time2) {\n  var t1 = new Date();\n  var parts = time1.split(\":\");\n  t1.setHours(parts[0], parts[1], parts[2], 0);\n  var t2 = new Date();\n  parts = time2.split(\":\");\n  t2.setHours(parts[0], parts[1], parts[2], 0); // returns 1 if greater, -1 if less and 0 if the same\n\n  if (t1.getTime() > t2.getTime()) return 1;\n  if (t1.getTime() < t2.getTime()) return -1;\n  return 0;\n}\n\nvar DownloadTime = /*#__PURE__*/function (_React$Component) {\n  _inherits(DownloadTime, _React$Component);\n\n  var _super = _createSuper(DownloadTime);\n\n  function DownloadTime(props) {\n    var _this;\n\n    _classCallCheck(this, DownloadTime);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      countMorning: 0,\n      countAfternoon: 0,\n      countEvening: 0,\n      countNight: 0,\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(DownloadTime, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.data.downloads.map(function (d) {\n        /*\r\n        console.log(\"valutare: \"); // + (Date.parse(d.downloaded_at) >= Date.parse('06:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('12:00:00')));\r\n        \r\n        console.log(dateCompare(d.downloaded_at,('12:00:00') ));\r\n        console.log((Date.parse(d.downloaded_at) >= Date.parse('06:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('12:00:00')));\r\n        console.log((Date.parse(d.downloaded_at) > Date.parse('12:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('18:00:00')));\r\n        console.log((Date.parse(d.downloaded_at) > Date.parse('18:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('22:00:00')));\r\n        console.log((Date.parse(d.downloaded_at) > Date.parse('22:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('06:00:00')));\r\n          if((Date.parse(d.downloaded_at) >= Date.parse('06:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('12:00:00')))\r\n        {countMorn = countMorn +1;} // Downloads in the MORNING\r\n        else if((Date.parse(d.downloaded_at) > Date.parse('12:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('18:00:00')))\r\n        {countAfter = countAfter + 1;}// Downloads in the AFTERNOON\r\n        else if ((Date.parse(d.downloaded_at) > Date.parse('18:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('22:00:00')))\r\n        {countEven = countEven + 1;} // Downloads in the EVENING\r\n        else if ((Date.parse(d.downloaded_at) > Date.parse('22:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('06:00:00')))\r\n        {countNi = countNi + 1;} // Downloads at NIGHT\r\n        */\n        if (dateCompare(d.downloaded_at, '12:00:00') == (-1 || 0) && dateCompare(d.downloaded_at, '06:00:00') == 1) {\n          countMorn = countMorn + 1;\n        } // Downloads in the MORNING\n\n\n        if (dateCompare(d.downloaded_at, '12:00:00') == 1 && dateCompare(d.downloaded_at, '18:00:00') == (-1 || 0)) {\n          countAfter = countAfter + 1;\n        } // Downloads in the AFTERNOON\n\n\n        if (dateCompare(d.downloaded_at, '18:00:00') == 1 && dateCompare(d.downloaded_at, '22:00:00') == (-1 || 0)) {\n          countEven = countEven + 1;\n        } // Downloads in the EVENING\n\n\n        if (dateCompare(d.downloaded_at, '22:00:00') == 1 && dateCompare(d.downloaded_at, '06:00:00') == (-1 || 0)) {\n          countNi = countNi + 1;\n        } // Downloads at NIGHT\n\n        /*\r\n        console.log(countMorn);\r\n        console.log(countAfter);\r\n        console.log(countEven);\r\n        console.log(countNi);*/\n\n      });\n      this.setState({\n        countMorning: countMorn,\n        countAfternoon: countAfter,\n        countEvening: countEven,\n        countNight: countNi,\n        loading: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 16\n          }\n        }, \"loading...\");\n      }\n\n      return __jsx(\"table\", {\n        className: \"table table-striped table-bordered table-sm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, __jsx(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }, __jsx(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, \"#\"), __jsx(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, \"Morning\"), __jsx(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, \"Afternoon\"), __jsx(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }\n      }, \"Evening\"), __jsx(\"th\", {\n        scope: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }, \"Night\"))), __jsx(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }, __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, __jsx(\"th\", {\n        scope: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }\n      }, \"Downloads\"), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }\n      }, this.state.countMorning), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }, this.state.countAfternoon), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }\n      }, this.state.countEvening), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }, this.state.countNight))));\n    }\n  }]);\n\n  return DownloadTime;\n}(React.Component);\n\nexport { DownloadTime as default };","map":{"version":3,"sources":["C:/Users/Alex/Desktop/empatica/empatica_delivery/client/components/DownloadTime.js"],"names":["React","countMorn","countEven","countAfter","countNi","dateCompare","time1","time2","t1","Date","parts","split","setHours","t2","getTime","DownloadTime","props","state","countMorning","countAfternoon","countEvening","countNight","loading","data","downloads","map","d","downloaded_at","setState","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nlet countMorn = 0;\r\nlet countEven = 0;\r\nlet countAfter = 0;\r\nlet countNi = 0;\r\n\r\nfunction dateCompare(time1,time2) {\r\n    var t1 = new Date();\r\n    var parts = time1.split(\":\");\r\n    t1.setHours(parts[0],parts[1],parts[2],0);\r\n    var t2 = new Date();\r\n    parts = time2.split(\":\");\r\n    t2.setHours(parts[0],parts[1],parts[2],0);\r\n  \r\n    // returns 1 if greater, -1 if less and 0 if the same\r\n    if (t1.getTime()>t2.getTime()) return 1;\r\n    if (t1.getTime()<t2.getTime()) return -1;\r\n    return 0;\r\n  }\r\n  \r\n\r\nexport default class DownloadTime extends React.Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = {\r\n           countMorning: 0,\r\n           countAfternoon: 0,\r\n           countEvening: 0,\r\n           countNight: 0,\r\n           loading: true\r\n        };\r\n    }\r\n    \r\n    componentDidMount()\r\n    {\r\n        this.props.data.downloads.map( d =>\r\n            {\r\n                /*\r\n                console.log(\"valutare: \"); // + (Date.parse(d.downloaded_at) >= Date.parse('06:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('12:00:00')));\r\n                \r\n                console.log(dateCompare(d.downloaded_at,('12:00:00') ));\r\n                console.log((Date.parse(d.downloaded_at) >= Date.parse('06:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('12:00:00')));\r\n            console.log((Date.parse(d.downloaded_at) > Date.parse('12:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('18:00:00')));\r\n            console.log((Date.parse(d.downloaded_at) > Date.parse('18:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('22:00:00')));\r\n            console.log((Date.parse(d.downloaded_at) > Date.parse('22:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('06:00:00')));\r\n\r\n                if((Date.parse(d.downloaded_at) >= Date.parse('06:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('12:00:00')))\r\n                {countMorn = countMorn +1;} // Downloads in the MORNING\r\n                else if((Date.parse(d.downloaded_at) > Date.parse('12:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('18:00:00')))\r\n                {countAfter = countAfter + 1;}// Downloads in the AFTERNOON\r\n                else if ((Date.parse(d.downloaded_at) > Date.parse('18:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('22:00:00')))\r\n                {countEven = countEven + 1;} // Downloads in the EVENING\r\n                else if ((Date.parse(d.downloaded_at) > Date.parse('22:00:00'))&&(Date.parse(d.downloaded_at) <= Date.parse('06:00:00')))\r\n                {countNi = countNi + 1;} // Downloads at NIGHT\r\n*/\r\n                if((dateCompare(d.downloaded_at, ('12:00:00')) == (-1 || 0) ) &&(dateCompare(d.downloaded_at, ('06:00:00')) == 1 ))\r\n                {countMorn = countMorn +1;} // Downloads in the MORNING\r\n                if((dateCompare(d.downloaded_at, ('12:00:00')) == 1) &&(dateCompare(d.downloaded_at, ('18:00:00')) == (-1 || 0)))\r\n                {countAfter = countAfter + 1;}// Downloads in the AFTERNOON\r\n                if((dateCompare(d.downloaded_at, ('18:00:00')) == 1 ) &&(dateCompare(d.downloaded_at, ('22:00:00')) == ( -1 || 0) ))\r\n                {countEven = countEven + 1;} // Downloads in the EVENING\r\n                if((dateCompare(d.downloaded_at, ('22:00:00')) == 1 ) &&(dateCompare(d.downloaded_at, ('06:00:00')) == ( -1 || 0) ))\r\n                {countNi = countNi + 1;} // Downloads at NIGHT\r\n\r\n                /*\r\n                console.log(countMorn);\r\n                console.log(countAfter);\r\n                console.log(countEven);\r\n                console.log(countNi);*/\r\n            })\r\n\r\n        this.setState({countMorning: countMorn, countAfternoon: countAfter, countEvening: countEven, countNight: countNi, loading: false});\r\n    }\r\n\r\n    render()\r\n    {\r\n        \r\n           if (this.state.loading) \r\n        {\r\n        return <div>loading...</div>;\r\n        }\r\n\r\n        \r\n        return(\r\n            <table  className=\"table table-striped table-bordered table-sm\">\r\n            <thead>\r\n            <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">Morning</th>\r\n                <th scope=\"col\">Afternoon</th>\r\n                <th scope=\"col\">Evening</th>\r\n                <th scope=\"col\">Night</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <th scope=\"row\">Downloads</th>\r\n                    <td>{this.state.countMorning}</td>\r\n                    <td>{this.state.countAfternoon}</td>\r\n                    <td>{this.state.countEvening}</td>\r\n                    <td>{this.state.countNight}</td>\r\n                </tr>\r\n            </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}