{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\empatica\\\\empatica_delivery\\\\client\\\\components\\\\Downloads.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query DownloadsQuery {\\n    downloads\\n    {\\n        app_id\\n        longitude\\n        latitude\\n        downloaded_at\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/****\r\n * Component in charge of retrieving the data from the database and in showing the interactive map with the tags\r\n * refering to the geographical position where the download was registered\r\n */\nimport React, { Component, Fragment } from 'react';\nimport ReactMapGL, { Marker } from 'react-map-gl'; // the map\n\nimport Nation from './Nation';\nimport gpl from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport DownloadTime from './DownloadTime'; //The query for the GraphQL server\n\nvar DOWNLOADS_QUERY = gpl(_templateObject());\nexport var Downloads = /*#__PURE__*/function (_Component) {\n  _inherits(Downloads, _Component);\n\n  var _super = _createSuper(Downloads);\n\n  function Downloads() {\n    var _this;\n\n    _classCallCheck(this, Downloads);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      viewport: {\n        width: '30vw',\n        height: '90vh',\n        latitude: 45.464203,\n        longitude: 9.189982,\n        zoom: 5\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Downloads, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }\n      }, __jsx(Query, {\n        query: DOWNLOADS_QUERY,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, function (_ref) {\n        var _extends2;\n\n        var loading = _ref.loading,\n            error = _ref.error,\n            data = _ref.data;\n        if (loading) return __jsx(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 37\n          }\n        }, \"Loading ....\");\n        if (error) console.log(error); //onsole.log(data);\n\n        return __jsx(\"div\", {\n          className: \"row\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 37\n          }\n        }, __jsx(\"div\", {\n          className: \"col-6\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 41\n          }\n        }, __jsx(ReactMapGL, _extends((_extends2 = {\n          mapStyle: \"mapbox://styles/mapbox/streets-v9\",\n          mapboxApiAccessToken: \"pk.eyJ1IjoiYWxleGVuYXgiLCJhIjoiY2tiMmVmZ2I4MDZ6dTJ1czBwYnpqOGtxcCJ9.IBNl_OPjhbhwcMbTycNL3w\"\n        }, _defineProperty(_extends2, \"mapStyle\", \"mapbox://styles/alexenax/ckb2fqmm606pj1ir103dxqxdc\"), _defineProperty(_extends2, \"onViewportChange\", function onViewportChange(viewport) {\n          return _this2.setState({\n            viewport: viewport\n          });\n        }), _extends2), _this2.state.viewport, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 45\n          }\n        }), data.downloads.map(function (download) {\n          return __jsx(Marker, {\n            key: download.app_id,\n            latitude: download.latitude,\n            longitude: download.longitude,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 53\n            }\n          }, __jsx(\"img\", {\n            src: \"https://www.empatica.com/assets/images/homepage/empatica_red_heart-icn.svg\",\n            alt: \"Home Icon\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 57\n            }\n          }));\n        }))), __jsx(\"div\", {\n          className: \"col-6\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 37\n          }\n        }, __jsx(\"div\", {\n          className: \"row\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 41\n          }\n        }, __jsx(\"div\", {\n          className: \"col-12\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 45\n          }\n        }, __jsx(Nation, {\n          data: data,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 49\n          }\n        }))), __jsx(\"div\", {\n          className: \"row\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 41\n          }\n        }, __jsx(\"div\", {\n          className: \"col-12\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 45\n          }\n        }, __jsx(DownloadTime, {\n          data: data,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 50\n          }\n        })))));\n      }));\n    }\n  }]);\n\n  return Downloads;\n}(Component);\nexport default Downloads;","map":{"version":3,"sources":["C:/Users/Alex/Desktop/empatica/empatica_delivery/client/components/Downloads.js"],"names":["React","Component","Fragment","ReactMapGL","Marker","Nation","gpl","Query","DownloadTime","DOWNLOADS_QUERY","Downloads","viewport","width","height","latitude","longitude","zoom","loading","error","data","console","log","setState","state","downloads","map","download","app_id"],"mappings":"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","sourcesContent":["/****\r\n * Component in charge of retrieving the data from the database and in showing the interactive map with the tags\r\n * refering to the geographical position where the download was registered\r\n */\r\nimport React, { Component, Fragment} from 'react';\r\nimport ReactMapGL, {Marker} from 'react-map-gl'; // the map\r\nimport Nation from './Nation';\r\nimport gpl from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport DownloadTime from './DownloadTime';\r\n\r\n//The query for the GraphQL server\r\nconst DOWNLOADS_QUERY = gpl`\r\n  query DownloadsQuery {\r\n    downloads\r\n    {\r\n        app_id\r\n        longitude\r\n        latitude\r\n        downloaded_at\r\n    }\r\n  }\r\n`;\r\n\r\nexport class Downloads extends Component {\r\n\r\n    // Initial state fo the interactive map\r\n    state = {\r\n            viewport: {\r\n            width: '30vw',\r\n            height: '90vh',\r\n            latitude: 45.464203,\r\n            longitude: 9.189982,\r\n            zoom: 5\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Fragment>\r\n                <Query query= {DOWNLOADS_QUERY}>\r\n                    {\r\n                        ({loading, error, data}) => {\r\n                            \r\n                            if(loading) return (\r\n                                    <p>Loading ....</p>); \r\n                            if(error) console.log(error);\r\n                            \r\n                            //onsole.log(data);\r\n\r\n                            return (<div className=\"row\">\r\n                                        <div className=\"col-6\">\r\n                                            <ReactMapGL\r\n                                                mapStyle=\"mapbox://styles/mapbox/streets-v9\"\r\n                                                mapboxApiAccessToken=\"pk.eyJ1IjoiYWxleGVuYXgiLCJhIjoiY2tiMmVmZ2I4MDZ6dTJ1czBwYnpqOGtxcCJ9.IBNl_OPjhbhwcMbTycNL3w\"\r\n                                                mapStyle=\"mapbox://styles/alexenax/ckb2fqmm606pj1ir103dxqxdc\"\r\n                                                onViewportChange={(viewport) => this.setState({ viewport })}\r\n                                                {...this.state.viewport}\r\n                                            >\r\n                                    \r\n                                            {\r\n                                                data.downloads.map(download => (\r\n                                                    \r\n                                                    <Marker key={download.app_id} \r\n                                                            latitude={download.latitude}\r\n                                                            longitude={download.longitude}\r\n                                                    >\r\n                                                        <img src=\"https://www.empatica.com/assets/images/homepage/empatica_red_heart-icn.svg\" alt=\"Home Icon\"></img>\r\n                                                    </Marker>\r\n                                                ))\r\n                                            }\r\n                                    \r\n                                        </ReactMapGL>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-12\">\r\n                                                <Nation data = {data}/> \r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-12\">\r\n                                                 <DownloadTime data = {data}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                            );\r\n                        }\r\n                    }\r\n                </Query>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Downloads\r\n"]},"metadata":{},"sourceType":"module"}