{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\empatica\\\\empatica_delivery\\\\client\\\\components\\\\Nation.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nconst urls = [];\nconst baseURL = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\";\nconst nations = [];\nconst uniqueNations = [];\nconst dt = [];\nvar obj = {};\nexport default class Nation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      data: []\n    };\n  }\n  /*\r\n  state = {\r\n    loading: true,\r\n    person: null\r\n  };\r\n      async componentDidMount() {\r\n    const url = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n      this.setState({ person: data.results[0].address_components[6], loading: false });\r\n  }\r\n      render() \r\n  {\r\n    if (this.state.loading) {\r\n      return <div>loading...</div>;\r\n    }\r\n        if (!this.state.person) {\r\n      return <div>didn't get a person</div>;\r\n    }\r\n        return (\r\n      <div>\r\n        <div>{this.state.person.long_name}</div>\r\n        <div>{this.props.data.downloads[1].app_id}.</div>\r\n      </div>\r\n    );\r\n  }\r\n    */\n\n\n  componentDidMount() {\n    //Create the query for each pair of longitude&latitude\n    this.props.data.downloads.map(download => // Query too Goolgle Maps API in order to get the nation\n    urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + download.latitude + \",\" + download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")); //Send request to the API\n\n    var promises = Promise.all(urls.map(url => fetch(url))); //this.setState({nations: res.results[0].address_components[6] , loading: false})\n    //Get results of the API and save the values\n\n    promises.then(results => Promise.all(results.map(r => r.json()))).then(res => res.map(t => {\n      dt.push(t.results[0].address_components[0].long_name); // console.log(\"hello\")\n      // console.log(t.results[0].address_components[0].long_name)\n    })).then(this.setState({\n      loading: false,\n      data: dt\n    })); // res.map(\n    //    t =>( \n    //     nations.push(t.results[0].address_components[0].long_name)\n    //console.log(t.results[0].address_components[0].long_name)\n    //this.setState({nations: res.results[0].address_components[6] , loading: false})\n    //      )\n    //  ) \n    //  .then(\n    //      this.setState({loading: false})\n    //  )\n  }\n\n  render() {\n    /*\r\n    // The urls that query the Google API\r\n    this.props.data.downloads.map(download => (\r\n        urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+ download.longitude + \",\"+ download.latitude + \"&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\r\n    ))\r\n    \r\n    \r\n    var promises = Promise.all(urls.map(url => (\r\n        fetch(url)\r\n    )))\r\n      promises\r\n        .then((results) =>\r\n            Promise.all(results.map(r => r.json()))\r\n        )\r\n        .then((res) =>(\r\n            res.map(n => \r\n                (\r\n                   console.log(n.results)\r\n                    \r\n                ))\r\n        ))\r\n    */\n\n    /*\r\n    promises\r\n    .then((results) =>\r\n        Promise.all(results.map(r => r.json()\r\n            ))\r\n    )\r\n    .then((res) => (res.map(n =>(\r\n      ))\r\n    ))*/\n    if (this.state.loading) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 16\n        }\n      }, \"loading...\");\n    }\n\n    if (!this.state.data) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 16\n        }\n      }, \"didn't get the nations\");\n    }\n\n    let itemList = this.state.data.map( // t => {\n    //   console.log(\"hello\")\n    // console.log(t)\n    //}\n    function (item) {\n      console.log(\"hello\"); //console.log(item)\n\n      return __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }\n      }, item);\n    } //res.map(\n    //    t =>( \n    //     nations.push(t.results[0].address_components[0].long_name)\n    );\n    console.log(this.state.data);\n    const result = [];\n    const map = new Map();\n\n    for (const item of this.state.data) {\n      console.log(\"hello\");\n      console.log(item);\n\n      if (!map.has(item)) {\n        map.set(item, true); // set any value to Map\n\n        result.push(item);\n      }\n    }\n\n    console.log(result); //Counting the number of repetition\n\n    let count = 0;\n    let dataNat = this.state.data;\n    let nationDownload = result.map(function (item) {\n      console.log(\"item \" + item);\n      count = 0;\n\n      for (const it in dataNat) {\n        console.log(\"ita\" + dataNat[it]);\n\n        if (item == it) {\n          count = count + 1;\n        }\n      }\n\n      return __jsx(\"li\", {\n        key: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 16\n        }\n      }, count);\n    });\n    return __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }\n    }, nationDownload);\n    /*\r\n    if (this.state.loading) {\r\n    return <div>loading...</div>;\r\n    }\r\n        if (!this.state.person) {\r\n        return <div>didn't get a person</div>;\r\n    }\r\n        return (\r\n        <div>\r\n        <div>{this.state.person.long_name}</div>\r\n        <div>{this.props.data.downloads[1].app_id}.</div>\r\n        </div>\r\n    );*/\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alex/Desktop/empatica/empatica_delivery/client/components/Nation.js"],"names":["React","urls","baseURL","nations","uniqueNations","dt","obj","Nation","Component","constructor","props","state","loading","data","componentDidMount","downloads","map","download","push","latitude","longitude","promises","Promise","all","url","fetch","then","results","r","json","res","t","address_components","long_name","setState","render","itemList","item","console","log","result","Map","has","set","count","dataNat","nationDownload","it"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst urls = [];\r\nconst baseURL =\"https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\";\r\nconst nations = [];\r\nconst uniqueNations = [];\r\nconst dt = [];\r\nvar obj = {};\r\n\r\nexport default class Nation extends React.Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n       this.state = { \r\n        \r\n            loading: true,\r\n            data: []\r\n        };\r\n\r\n        \r\n        \r\n    }\r\n\r\n\r\n    \r\n\r\n    /*\r\n    state = {\r\n      loading: true,\r\n      person: null\r\n    };\r\n  \r\n    async componentDidMount() {\r\n      const url = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\";\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n\r\n      this.setState({ person: data.results[0].address_components[6], loading: false });\r\n    }\r\n  \r\n    render() \r\n    {\r\n      if (this.state.loading) {\r\n        return <div>loading...</div>;\r\n      }\r\n  \r\n      if (!this.state.person) {\r\n        return <div>didn't get a person</div>;\r\n      }\r\n  \r\n      return (\r\n        <div>\r\n          <div>{this.state.person.long_name}</div>\r\n          <div>{this.props.data.downloads[1].app_id}.</div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    */\r\n\r\ncomponentDidMount() \r\n{\r\n    //Create the query for each pair of longitude&latitude\r\n    this.props.data.downloads.map(download => (\r\n        // Query too Goolgle Maps API in order to get the nation\r\n        urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+ download.latitude + \",\"+ download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\r\n    ))  \r\n\r\n    //Send request to the API\r\n    var promises = Promise.all(urls.map(url => (\r\n        fetch(url)\r\n    )));\r\n\r\n//this.setState({nations: res.results[0].address_components[6] , loading: false})\r\n\r\n    //Get results of the API and save the values\r\n    promises\r\n        .then((results) =>\r\n            Promise.all(results.map(r => r.json()))\r\n        )\r\n        .then((res) =>\r\n            res.map(t =>          \r\n                {\r\n                    dt.push(t.results[0].address_components[0].long_name)\r\n                \r\n                   // console.log(\"hello\")\r\n                   // console.log(t.results[0].address_components[0].long_name)\r\n                }\r\n                \r\n            ))\r\n            .then(    this.setState({loading: false, data: dt}))\r\n           // res.map(\r\n             //    t =>( \r\n                     \r\n               //     nations.push(t.results[0].address_components[0].long_name)\r\n                  \r\n                    //console.log(t.results[0].address_components[0].long_name)\r\n                //this.setState({nations: res.results[0].address_components[6] , loading: false})\r\n                \r\n                \r\n              //      )\r\n                    \r\n        \r\n            \r\n      //  ) \r\n      //  .then(\r\n      //      this.setState({loading: false})\r\n      //  )\r\n        \r\n}\r\n\r\n\r\n\r\n    render()\r\n    {\r\n        /*\r\n        // The urls that query the Google API\r\n        this.props.data.downloads.map(download => (\r\n            urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+ download.longitude + \",\"+ download.latitude + \"&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\r\n        ))\r\n        \r\n        \r\n        var promises = Promise.all(urls.map(url => (\r\n            fetch(url)\r\n        )))\r\n\r\n        promises\r\n            .then((results) =>\r\n                Promise.all(results.map(r => r.json()))\r\n            )\r\n            .then((res) =>(\r\n                res.map(n => \r\n                    (\r\n\r\n                     console.log(n.results)\r\n                        \r\n                    ))\r\n            ))\r\n        */\r\n    \r\n\r\n\r\n            /*\r\n            promises\r\n            .then((results) =>\r\n                Promise.all(results.map(r => r.json()\r\n                    ))\r\n            )\r\n            .then((res) => (res.map(n =>(\r\n\r\n            ))\r\n            ))*/\r\n\r\n\r\n        \r\n           \r\n      if (this.state.loading) \r\n      {\r\n        return <div>loading...</div>;\r\n      }\r\n  \r\n      if (!this.state.data) {\r\n        return <div>didn't get the nations</div>;\r\n      }\r\n  \r\n      let itemList = this.state.data.map(\r\n               // t => {\r\n\r\n                 //   console.log(\"hello\")\r\n                   // console.log(t)\r\n                //}\r\n\r\n          function(item)\r\n          {\r\n                console.log(\"hello\")\r\n                //console.log(item)\r\n                 return <p>{item}</p>\r\n          }\r\n\r\n          //res.map(\r\n            //    t =>( \r\n                    \r\n              //     nations.push(t.results[0].address_components[0].long_name)\r\n\r\n      );\r\n\r\n    console.log(this.state.data);\r\n\r\n      const result = [];\r\n      const map = new Map();\r\n      for (const item of this.state.data) {\r\n          console.log(\"hello\");\r\n          console.log(item);\r\n          if(!map.has(item)){\r\n              map.set(item, true);    // set any value to Map\r\n              result.push(\r\n                  item\r\n               );\r\n          }\r\n      }\r\n      console.log(result);\r\n\r\n      //Counting the number of repetition\r\n\r\n      let count = 0;\r\n      let dataNat = this.state.data;\r\n      \r\n      let nationDownload = result.map(function(item)\r\n      {\r\n          console.log(\"item \" + item);\r\n          count = 0;\r\n          for(const it in dataNat)\r\n          {\r\n              console.log(\"ita\" + dataNat[it]);\r\n              if(item == it)\r\n              {\r\n                  count = count + 1;\r\n              }\r\n          }\r\n\r\n        return <li key={item}>{count}</li>\r\n      })\r\n\r\n\r\n      return (\r\n          <ul>\r\n                {nationDownload}\r\n          </ul>\r\n      )\r\n        \r\n        /*\r\n        if (this.state.loading) {\r\n        return <div>loading...</div>;\r\n      }\r\n  \r\n        if (!this.state.person) {\r\n            return <div>didn't get a person</div>;\r\n        }\r\n  \r\n        return (\r\n            <div>\r\n            <div>{this.state.person.long_name}</div>\r\n            <div>{this.props.data.downloads[1].app_id}.</div>\r\n            </div>\r\n        );*/\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}