{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\empatica\\\\empatica_delivery\\\\client\\\\components\\\\Nation.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nconst BASE_URL = 'https://rickandmortyapi.com/api/';\nconst urls = ['https://dog.ceo/api/breeds/list', 'https://dog.ceo/api/breeds/image/random']; // ------------------------------------------\n//  HELPER FUNCTIONS\n// ------------------------------------------\n\nfunction checkStatus(response) {\n  if (response.ok) {\n    return Promise.resolve(response);\n  } else {\n    return Promise.reject(new Error(response.statusText));\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nexport default class Nation extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: true,\n      person: null\n    });\n  }\n\n  async componentDidMount() {\n    const url = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({\n      person: data.results[0].address_components[6],\n      loading: false\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 16\n        }\n      }, \"loading...\");\n    }\n\n    if (!this.state.person) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 16\n        }\n      }, \"didn't get a person\");\n    }\n\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, this.state.person.long_name), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, this.props.data.downloads[1].app_id, \".\"), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, // use map() to perform a fetch and handle the response for each url\n    Promise.all(urls.map(url => fetch(url).then(checkStatus).then(parseJSON).catch(logError))).then(data => {// do something with the data\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alex/Desktop/empatica/empatica_delivery/client/components/Nation.js"],"names":["React","BASE_URL","urls","checkStatus","response","ok","Promise","resolve","reject","Error","statusText","parseJSON","json","Nation","Component","loading","person","componentDidMount","url","fetch","data","setState","results","address_components","render","state","long_name","props","downloads","app_id","all","map","then","catch","logError"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,MAAMC,QAAQ,GAAG,kCAAjB;AAIA,MAAMC,IAAI,GAAG,CACT,iCADS,EAET,yCAFS,CAAb,C,CAMA;AACA;AACA;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC3B,MAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,WAAOC,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP;AACD,GAFD,MAEO;AACL,WAAOE,OAAO,CAACE,MAAR,CAAe,IAAIC,KAAJ,CAAUL,QAAQ,CAACM,UAAnB,CAAf,CAAP;AACD;AACF;;AAED,SAASC,SAAT,CAAmBP,QAAnB,EAA6B;AAC3B,SAAOA,QAAQ,CAACQ,IAAT,EAAP;AACD;;AAIH,eAAe,MAAMC,MAAN,SAAqBb,KAAK,CAACc,SAA3B,CAAqC;AAAA;AAAA;;AAAA,mCAOxC;AACNC,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAPwC;AAAA;;AAYhD,QAAMC,iBAAN,GAA0B;AACxB,UAAMC,GAAG,GAAG,2HAAZ;AACA,UAAMd,QAAQ,GAAG,MAAMe,KAAK,CAACD,GAAD,CAA5B;AACA,UAAME,IAAI,GAAG,MAAMhB,QAAQ,CAACQ,IAAT,EAAnB;AAEA,SAAKS,QAAL,CAAc;AAAEL,MAAAA,MAAM,EAAEI,IAAI,CAACE,OAAL,CAAa,CAAb,EAAgBC,kBAAhB,CAAmC,CAAnC,CAAV;AAAiDR,MAAAA,OAAO,EAAE;AAA1D,KAAd;AACD;;AAEDS,EAAAA,MAAM,GACN;AACE,QAAI,KAAKC,KAAL,CAAWV,OAAf,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AAED,QAAI,CAAC,KAAKU,KAAL,CAAWT,MAAhB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD;;AAED,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKS,KAAL,CAAWT,MAAX,CAAkBU,SAAxB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKC,KAAL,CAAWP,IAAX,CAAgBQ,SAAhB,CAA0B,CAA1B,EAA6BC,MAAnC,MAFF,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ;AACAvB,IAAAA,OAAO,CAACwB,GAAR,CAAY5B,IAAI,CAAC6B,GAAL,CAASb,GAAG,IACpBC,KAAK,CAACD,GAAD,CAAL,CACCc,IADD,CACM7B,WADN,EAEC6B,IAFD,CAEMrB,SAFN,EAGCsB,KAHD,CAGOC,QAHP,CADQ,CAAZ,EAMCF,IAND,CAMMZ,IAAI,IAAI,CACV;AACH,KARD,CAHR,CALA,CADF;AAwBD;;AAtD+C","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nconst BASE_URL = 'https://rickandmortyapi.com/api/';\r\n\r\n\r\n\r\nconst urls = [\r\n    'https://dog.ceo/api/breeds/list',\r\n    'https://dog.ceo/api/breeds/image/random'\r\n  ];\r\n  \r\n \r\n// ------------------------------------------\r\n//  HELPER FUNCTIONS\r\n// ------------------------------------------\r\n\r\nfunction checkStatus(response) {\r\n    if (response.ok) {\r\n      return Promise.resolve(response);\r\n    } else {\r\n      return Promise.reject(new Error(response.statusText));\r\n    }\r\n  }\r\n  \r\n  function parseJSON(response) {\r\n    return response.json();\r\n  }\r\n  \r\n\r\n\r\nexport default class Nation extends React.Component {\r\n\r\n\r\n\r\n\r\n    //end\r\n\r\n    state = {\r\n      loading: true,\r\n      person: null\r\n    };\r\n  \r\n    async componentDidMount() {\r\n      const url = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\";\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n\r\n      this.setState({ person: data.results[0].address_components[6], loading: false });\r\n    }\r\n  \r\n    render() \r\n    {\r\n      if (this.state.loading) {\r\n        return <div>loading...</div>;\r\n      }\r\n  \r\n      if (!this.state.person) {\r\n        return <div>didn't get a person</div>;\r\n      }\r\n  \r\n      return (\r\n        <div>\r\n          <div>{this.state.person.long_name}</div>\r\n          <div>{this.props.data.downloads[1].app_id}.</div>\r\n\r\n\r\n        <div>\r\n            {\r\n                // use map() to perform a fetch and handle the response for each url\r\n                Promise.all(urls.map(url =>\r\n                    fetch(url)\r\n                    .then(checkStatus)                 \r\n                    .then(parseJSON)\r\n                    .catch(logError)\r\n                ))\r\n                .then(data => {\r\n                    // do something with the data\r\n                })\r\n            }\r\n\r\n        </div>\r\n\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}