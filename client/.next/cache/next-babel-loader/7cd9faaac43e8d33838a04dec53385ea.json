{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\empatica\\\\empatica_delivery\\\\client\\\\components\\\\Nation.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nvar urls = [];\nvar baseURL = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\";\nvar nations = [];\nvar uniqueNations = [];\nvar obj = {};\n\nvar Nation = /*#__PURE__*/function (_React$Component) {\n  _inherits(Nation, _React$Component);\n\n  var _super = _createSuper(Nation);\n\n  function Nation(props) {\n    var _this;\n\n    _classCallCheck(this, Nation);\n\n    _this = _super.call(this, props); // this.state = {loading: true};\n    //Create the query for each pair of longitude&latitude\n\n    props.data.downloads.map(function (download) {\n      return (// Query too Goolgle Maps API in order to get the nation\n        urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + download.latitude + \",\" + download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\n      );\n    }); //Send request to the API\n\n    var promises = Promise.all(urls.map(function (url) {\n      return fetch(url);\n    })); //this.setState({nations: res.results[0].address_components[6] , loading: false})\n    //Get results of the API and save the values\n\n    promises.then(function (results) {\n      return Promise.all(results.map(function (r) {\n        return r.json();\n      }));\n    }).then(function (res) {\n      return res.map(function (t) {\n        return nations.push(t.results[0].address_components[0].long_name) //console.log(t.results[0].address_components[0].long_name)\n        //this.setState({nations: res.results[0].address_components[6] , loading: false})\n        ;\n      });\n    }).then();\n    return _this;\n  }\n  /*\r\n  state = {\r\n    loading: true,\r\n    person: null\r\n  };\r\n      async componentDidMount() {\r\n    const url = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n      this.setState({ person: data.results[0].address_components[6], loading: false });\r\n  }\r\n      render() \r\n  {\r\n    if (this.state.loading) {\r\n      return <div>loading...</div>;\r\n    }\r\n        if (!this.state.person) {\r\n      return <div>didn't get a person</div>;\r\n    }\r\n        return (\r\n      <div>\r\n        <div>{this.state.person.long_name}</div>\r\n        <div>{this.props.data.downloads[1].app_id}.</div>\r\n      </div>\r\n    );\r\n  }\r\n    */\n\n  /*\r\n  componentDidMount() \r\n  {\r\n      //Create the query for each pair of longitude&latitude\r\n      this.props.data.downloads.map(download => (\r\n          // Query too Goolgle Maps API in order to get the nation\r\n          urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+ download.latitude + \",\"+ download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\r\n      ))  \r\n  \r\n      //Send request to the API\r\n      var promises = Promise.all(urls.map(url => (\r\n          fetch(url)\r\n      )))\r\n  \r\n  //this.setState({nations: res.results[0].address_components[6] , loading: false})\r\n  \r\n      //Get results of the API and save the values\r\n      promises\r\n          .then((results) =>\r\n              Promise.all(results.map(r => r.json()))\r\n          )\r\n          .then((res) => (\r\n              res.map(\r\n                   t =>( \r\n                       \r\n                      nations.push(t.results[0].address_components[0].long_name)\r\n                    \r\n                      //console.log(t.results[0].address_components[0].long_name)\r\n                  //this.setState({nations: res.results[0].address_components[6] , loading: false})\r\n                  \r\n                  \r\n                      )\r\n                   )\r\n          \r\n                )\r\n          ) \r\n          .then(\r\n              this.setState({loading: false})\r\n          )\r\n          \r\n  }\r\n  */\n\n\n  _createClass(Nation, [{\n    key: \"render\",\n    value: function render() {\n      /*\r\n      // The urls that query the Google API\r\n      this.props.data.downloads.map(download => (\r\n          urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+ download.longitude + \",\"+ download.latitude + \"&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\r\n      ))\r\n      \r\n      \r\n      var promises = Promise.all(urls.map(url => (\r\n          fetch(url)\r\n      )))\r\n        promises\r\n          .then((results) =>\r\n              Promise.all(results.map(r => r.json()))\r\n          )\r\n          .then((res) =>(\r\n              res.map(n => \r\n                  (\r\n                     console.log(n.results)\r\n                      \r\n                  ))\r\n          ))\r\n      */\n\n      /*\r\n      promises\r\n      .then((results) =>\r\n          Promise.all(results.map(r => r.json()\r\n              ))\r\n      )\r\n      .then((res) => (res.map(n =>(\r\n        ))\r\n      ))*/\n\n      /*       \r\n       if (this.state.loading) \r\n       {\r\n         return <div>loading...</div>;\r\n       }\r\n           if (!nations) {\r\n         return <div>didn't get the nations</div>;\r\n       }\r\n      */\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }\n      }, console.log(nations)\n      /*nations.map\r\n      (n => {\r\n          \r\n          if(uniqueNations.indexOf(n) === -1)\r\n          {\r\n              uniqueNations.push(n)\r\n          }\r\n      })*/\n      );\n      /*\r\n      if (this.state.loading) {\r\n      return <div>loading...</div>;\r\n      }\r\n          if (!this.state.person) {\r\n          return <div>didn't get a person</div>;\r\n      }\r\n          return (\r\n          <div>\r\n          <div>{this.state.person.long_name}</div>\r\n          <div>{this.props.data.downloads[1].app_id}.</div>\r\n          </div>\r\n      );*/\n    }\n  }]);\n\n  return Nation;\n}(React.Component);\n\nexport { Nation as default };\n\nArray.prototype.unique = function () {\n  return this.filter(function (value, index, self) {\n    return self.indexOf(value) === index;\n  });\n};","map":{"version":3,"sources":["C:/Users/Alex/Desktop/empatica/empatica_delivery/client/components/Nation.js"],"names":["React","urls","baseURL","nations","uniqueNations","obj","Nation","props","data","downloads","map","download","push","latitude","longitude","promises","Promise","all","url","fetch","then","results","r","json","res","t","address_components","long_name","console","log","Component","Array","prototype","unique","filter","value","index","self","indexOf"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,IAAMC,IAAI,GAAG,EAAb;AACA,IAAMC,OAAO,GAAE,2HAAf;AACA,IAAMC,OAAO,GAAG,EAAhB;AACA,IAAMC,aAAa,GAAG,EAAtB;AAEA,IAAIC,GAAG,GAAG,EAAV;;IAEqBC,M;;;;;AAEjB,kBAAYC,KAAZ,EACA;AAAA;;AAAA;;AACI,8BAAMA,KAAN,EADJ,CAGG;AAEC;;AACJA,IAAAA,KAAK,CAACC,IAAN,CAAWC,SAAX,CAAqBC,GAArB,CAAyB,UAAAC,QAAQ;AAAA,aAC7B;AACAV,QAAAA,IAAI,CAACW,IAAL,CAAU,8DAA6DD,QAAQ,CAACE,QAAtE,GAAiF,GAAjF,GAAsFF,QAAQ,CAACG,SAA/F,GAA2G,kEAArH;AAF6B;AAAA,KAAjC,EANA,CAWA;;AACA,QAAIC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYhB,IAAI,CAACS,GAAL,CAAS,UAAAQ,GAAG;AAAA,aACnCC,KAAK,CAACD,GAAD,CAD8B;AAAA,KAAZ,CAAZ,CAAf,CAZA,CAgBJ;AAEI;;AACAH,IAAAA,QAAQ,CACHK,IADL,CACU,UAACC,OAAD;AAAA,aACFL,OAAO,CAACC,GAAR,CAAYI,OAAO,CAACX,GAAR,CAAY,UAAAY,CAAC;AAAA,eAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,OAAb,CAAZ,CADE;AAAA,KADV,EAIKH,IAJL,CAIU,UAACI,GAAD;AAAA,aACFA,GAAG,CAACd,GAAJ,CACK,UAAAe,CAAC;AAAA,eAEEtB,OAAO,CAACS,IAAR,CAAaa,CAAC,CAACJ,OAAF,CAAU,CAAV,EAAaK,kBAAb,CAAgC,CAAhC,EAAmCC,SAAhD,CAFF,CAIE;AACJ;AALE;AAAA,OADN,CADE;AAAA,KAJV,EAmBKP,IAnBL;AAnBA;AA0CC;AAKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA6CI;AACI;;;;;;;;;;;;;;;;;;;;;;;AA2BI;;;;;;;;;;AAaP;;;;;;;;;AAWC,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQQ,OAAO,CAACC,GAAR,CAAa1B,OAAb;AAEA;;;;;;;;AAJR,OADF;AAmBE;;;;;;;;;;;;;AAeH;;;;EAtN+BH,KAAK,CAAC8B,S;;SAArBxB,M;;AAyNrByB,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyB,YAAW;AAChC,SAAO,KAAKC,MAAL,CAAY,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8B;AAC/C,WAAOA,IAAI,CAACC,OAAL,CAAaH,KAAb,MAAwBC,KAA/B;AACD,GAFM,CAAP;AAGD,CAJH","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst urls = [];\r\nconst baseURL =\"https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\";\r\nconst nations = [];\r\nconst uniqueNations = [];\r\n\r\nvar obj = {};\r\n\r\nexport default class Nation extends React.Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n       // this.state = {loading: true};\r\n\r\n        //Create the query for each pair of longitude&latitude\r\n    props.data.downloads.map(download => (\r\n        // Query too Goolgle Maps API in order to get the nation\r\n        urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+ download.latitude + \",\"+ download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\r\n    ))  \r\n\r\n    //Send request to the API\r\n    var promises = Promise.all(urls.map(url => (\r\n        fetch(url)\r\n    )))\r\n\r\n//this.setState({nations: res.results[0].address_components[6] , loading: false})\r\n\r\n    //Get results of the API and save the values\r\n    promises\r\n        .then((results) =>\r\n            Promise.all(results.map(r => r.json()))\r\n        )\r\n        .then((res) => (\r\n            res.map(\r\n                 t =>( \r\n                     \r\n                    nations.push(t.results[0].address_components[0].long_name)\r\n                  \r\n                    //console.log(t.results[0].address_components[0].long_name)\r\n                //this.setState({nations: res.results[0].address_components[6] , loading: false})\r\n                \r\n                \r\n                    )\r\n                 )\r\n        \r\n              )\r\n        ) \r\n        .then(\r\n           // this.setState({loading: false})\r\n        )\r\n        \r\n    }\r\n\r\n\r\n    \r\n\r\n    /*\r\n    state = {\r\n      loading: true,\r\n      person: null\r\n    };\r\n  \r\n    async componentDidMount() {\r\n      const url = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\";\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n\r\n      this.setState({ person: data.results[0].address_components[6], loading: false });\r\n    }\r\n  \r\n    render() \r\n    {\r\n      if (this.state.loading) {\r\n        return <div>loading...</div>;\r\n      }\r\n  \r\n      if (!this.state.person) {\r\n        return <div>didn't get a person</div>;\r\n      }\r\n  \r\n      return (\r\n        <div>\r\n          <div>{this.state.person.long_name}</div>\r\n          <div>{this.props.data.downloads[1].app_id}.</div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    */\r\n/*\r\ncomponentDidMount() \r\n{\r\n    //Create the query for each pair of longitude&latitude\r\n    this.props.data.downloads.map(download => (\r\n        // Query too Goolgle Maps API in order to get the nation\r\n        urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+ download.latitude + \",\"+ download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\r\n    ))  \r\n\r\n    //Send request to the API\r\n    var promises = Promise.all(urls.map(url => (\r\n        fetch(url)\r\n    )))\r\n\r\n//this.setState({nations: res.results[0].address_components[6] , loading: false})\r\n\r\n    //Get results of the API and save the values\r\n    promises\r\n        .then((results) =>\r\n            Promise.all(results.map(r => r.json()))\r\n        )\r\n        .then((res) => (\r\n            res.map(\r\n                 t =>( \r\n                     \r\n                    nations.push(t.results[0].address_components[0].long_name)\r\n                  \r\n                    //console.log(t.results[0].address_components[0].long_name)\r\n                //this.setState({nations: res.results[0].address_components[6] , loading: false})\r\n                \r\n                \r\n                    )\r\n                 )\r\n        \r\n              )\r\n        ) \r\n        .then(\r\n            this.setState({loading: false})\r\n        )\r\n        \r\n}\r\n*/\r\n\r\n\r\n    render()\r\n    {\r\n        /*\r\n        // The urls that query the Google API\r\n        this.props.data.downloads.map(download => (\r\n            urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+ download.longitude + \",\"+ download.latitude + \"&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\r\n        ))\r\n        \r\n        \r\n        var promises = Promise.all(urls.map(url => (\r\n            fetch(url)\r\n        )))\r\n\r\n        promises\r\n            .then((results) =>\r\n                Promise.all(results.map(r => r.json()))\r\n            )\r\n            .then((res) =>(\r\n                res.map(n => \r\n                    (\r\n\r\n                     console.log(n.results)\r\n                        \r\n                    ))\r\n            ))\r\n        */\r\n    \r\n\r\n\r\n            /*\r\n            promises\r\n            .then((results) =>\r\n                Promise.all(results.map(r => r.json()\r\n                    ))\r\n            )\r\n            .then((res) => (res.map(n =>(\r\n\r\n            ))\r\n            ))*/\r\n\r\n\r\n        \r\n     /*       \r\n      if (this.state.loading) \r\n      {\r\n        return <div>loading...</div>;\r\n      }\r\n  \r\n      if (!nations) {\r\n        return <div>didn't get the nations</div>;\r\n      }\r\n  */\r\n      \r\n      return (\r\n        <div>\r\n            {\r\n                console.log( nations)\r\n                \r\n                /*nations.map\r\n                (n => {\r\n                    \r\n                    if(uniqueNations.indexOf(n) === -1)\r\n                    {\r\n                        uniqueNations.push(n)\r\n                    }\r\n                })*/\r\n                \r\n                \r\n            }</div>\r\n      );\r\n        \r\n        \r\n        /*\r\n        if (this.state.loading) {\r\n        return <div>loading...</div>;\r\n      }\r\n  \r\n        if (!this.state.person) {\r\n            return <div>didn't get a person</div>;\r\n        }\r\n  \r\n        return (\r\n            <div>\r\n            <div>{this.state.person.long_name}</div>\r\n            <div>{this.props.data.downloads[1].app_id}.</div>\r\n            </div>\r\n        );*/\r\n    }\r\n}\r\n\r\nArray.prototype.unique = function() {\r\n    return this.filter(function (value, index, self) {\r\n      return self.indexOf(value) === index;\r\n    });\r\n  };"]},"metadata":{},"sourceType":"module"}