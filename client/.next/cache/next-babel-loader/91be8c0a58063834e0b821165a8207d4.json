{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\empatica\\\\empatica_delivery\\\\client\\\\components\\\\Nation.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nconst urls = [];\nconst dt = [];\nexport default class Nation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    //Create the query for each pair of longitude&latitude\n    this.props.data.downloads.map(download => // Query too Goolgle Maps API in order to get the nation\n    urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + download.latitude + \",\" + download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")); //Send request to the API\n\n    var promises = Promise.all(urls.map(url => fetch(url))); //Get results of the API and save the values\n\n    promises.then(results => Promise.all(results.map(r => r.json()))).then(res => res.map(t => {\n      dt.push(t.results[0].address_components[0].long_name);\n    })).then(this.setState({\n      loading: false,\n      data: dt\n    }));\n  }\n\n  render() {\n    if (this.state.loading) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 16\n        }\n      }, \"loading...\");\n    }\n\n    if (!this.state.data) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 16\n        }\n      }, \"didn't get the nations\");\n    }\n\n    const result = [];\n    const map = new Map();\n\n    for (const item of this.state.data) {\n      console.log(\"hello\");\n      console.log(item);\n\n      if (!map.has(item)) {\n        map.set(item, true);\n        result.push(item);\n      }\n    } //Counting the number of repetition\n\n\n    let count = 0;\n    let countNation = 0;\n    let dataNat = this.state.data;\n    let nationDownload = result.map(function (item) {\n      count = 0;\n\n      for (const it in dataNat) {\n        if (item == dataNat[it]) {\n          count = count + 1;\n        }\n      }\n\n      countNation = countNation + 1;\n      return __jsx(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, __jsx(\"th\", {\n        scope: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, countNation), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }\n      }, item), __jsx(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }, count));\n    });\n    return __jsx(\"table\", {\n      id: \"dtBasicExample\",\n      className: \"table table-striped table-bordered table-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, __jsx(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, __jsx(\"th\", {\n      scope: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, \"#\"), __jsx(\"th\", {\n      scope: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, \"Nation\"), __jsx(\"th\", {\n      scope: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, \"Downloads\"))), __jsx(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, nationDownload));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Alex/Desktop/empatica/empatica_delivery/client/components/Nation.js"],"names":["React","urls","dt","Nation","Component","constructor","props","state","loading","data","componentDidMount","downloads","map","download","push","latitude","longitude","promises","Promise","all","url","fetch","then","results","r","json","res","t","address_components","long_name","setState","render","result","Map","item","console","log","has","set","count","countNation","dataNat","nationDownload","it"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nconst urls = [];\r\nconst dt = [];\r\n\r\nexport default class Nation extends React.Component {\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n       this.state = { \r\n        \r\n            loading: true,\r\n            data: []\r\n        };\r\n    }\r\n\r\ncomponentDidMount() \r\n{\r\n    //Create the query for each pair of longitude&latitude\r\n    this.props.data.downloads.map(download => (\r\n        // Query too Goolgle Maps API in order to get the nation\r\n        urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+ download.latitude + \",\"+ download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\r\n    ))  \r\n\r\n    //Send request to the API\r\n    var promises = Promise.all(urls.map(url => (\r\n        fetch(url)\r\n    )));\r\n\r\n    //Get results of the API and save the values\r\n    promises\r\n        .then((results) =>\r\n            Promise.all(results.map(r => r.json()))\r\n        )\r\n        .then((res) =>\r\n            res.map(t =>          \r\n                {\r\n                    dt.push(t.results[0].address_components[0].long_name)\r\n                }\r\n                \r\n            ))\r\n            .then(this.setState({loading: false, data: dt}))\r\n}\r\n\r\n    render()\r\n    {       \r\n           \r\n      if (this.state.loading) \r\n      {\r\n        return <div>loading...</div>;\r\n      }\r\n  \r\n      if (!this.state.data) {\r\n        return <div>didn't get the nations</div>;\r\n      }\r\n\r\n      const result = [];\r\n      const map = new Map();\r\n      for (const item of this.state.data) {\r\n          console.log(\"hello\");\r\n          console.log(item);\r\n          if(!map.has(item)){\r\n              map.set(item, true);   \r\n              result.push(\r\n                  item\r\n               );\r\n          }\r\n      }\r\n\r\n      //Counting the number of repetition\r\n\r\n      let count = 0;\r\n      let countNation = 0;\r\n      let dataNat = this.state.data;\r\n      \r\n      let nationDownload = result.map(function(item)\r\n      {\r\n          count = 0;\r\n          for(const it in dataNat)\r\n          {\r\n              if(item == dataNat[it])\r\n              {\r\n                  count = count + 1;\r\n              }\r\n          }\r\n          countNation = countNation + 1;\r\n\r\n        return (\r\n\r\n            <tr>\r\n                <th scope=\"row\">{countNation}</th>\r\n                <td>{item}</td>\r\n                <td>{count}</td>\r\n            </tr>\r\n        )\r\n        \r\n      })\r\n\r\n      return (\r\n       \r\n\r\n            <table id=\"dtBasicExample\" className=\"table table-striped table-bordered table-sm\">\r\n            <thead>\r\n            <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">Nation</th>\r\n                <th scope=\"col\">Downloads</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n                     {nationDownload}\r\n            </tbody>\r\n            </table>\r\n\r\n\r\n      )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}