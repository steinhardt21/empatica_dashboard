{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\empatica\\\\empatica_delivery\\\\client\\\\components\\\\Nation.js\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/************************************\r\n * Component in charge of recovering from the longitude and latitude the country using\r\n * the GoogleMaps API. Subsequently these data are rendered via a table \r\n */\nimport React from 'react';\nvar urls = []; //  variable used to load the urls to execute\n\nvar dt = []; // auxiliari variable\n\nvar Nation = /*#__PURE__*/function (_React$Component) {\n  _inherits(Nation, _React$Component);\n\n  var _super = _createSuper(Nation);\n\n  function Nation(props) {\n    var _this;\n\n    _classCallCheck(this, Nation);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      loading: true,\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(Nation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //Create the query for each pair of longitude&latitude\n      this.props.data.downloads.map(function (download) {\n        return (// Query too Goolgle Maps API in order to get the nation\n          urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + download.latitude + \",\" + download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\n        );\n      }); //Send request to the API\n\n      var promises = Promise.all(urls.map(function (url) {\n        return fetch(url);\n      })); //Get results of the API and save the values\n\n      promises.then(function (results) {\n        return Promise.all(results.map(function (r) {\n          return r.json();\n        }));\n      }).then(function (res) {\n        return res.map(function (t) {\n          dt.push(t.results[0].address_components[0].long_name);\n        });\n      }).then(this.setState({\n        loading: false,\n        data: dt\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // If the data are still not fetched  \n      if (this.state.loading) {\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }\n        }, \"loading...\");\n      } // Identification of the distinct nations related with the downloads //\n\n\n      var result = [];\n      var map = new Map();\n\n      var _iterator = _createForOfIteratorHelper(this.state.data),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n\n          if (!map.has(item)) {\n            map.set(item, true);\n            result.push(item);\n          }\n        } // Counting the number of downloads for each country //\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var count = 0;\n      var countNation = 0;\n      var dataNat = this.state.data;\n      var nationDownload = result.map(function (item) {\n        count = 0;\n\n        for (var it in dataNat) {\n          if (item == dataNat[it]) {\n            count = count + 1;\n          }\n        }\n\n        countNation = countNation + 1;\n        return (// New row in the table that is rendered\n          __jsx(\"tr\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }\n          }, __jsx(\"th\", {\n            scope: \"row\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 21\n            }\n          }, countNation), __jsx(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 21\n            }\n          }, item), __jsx(\"td\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 21\n            }\n          }, count))\n        );\n      });\n      return (// Render of the table with the nations involved and the downloads per each nation\n        __jsx(\"table\", {\n          id: \"dtBasicExample\",\n          className: \"table table-striped table-bordered table-sm\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 9\n          }\n        }, __jsx(\"thead\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 9\n          }\n        }, __jsx(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }\n        }, __jsx(\"th\", {\n          scope: \"col\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }\n        }, \"#\"), __jsx(\"th\", {\n          scope: \"col\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }\n        }, \"Nation\"), __jsx(\"th\", {\n          scope: \"col\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }\n        }, \"Downloads\"))), __jsx(\"tbody\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 9\n          }\n        }, nationDownload))\n      );\n    }\n  }]);\n\n  return Nation;\n}(React.Component);\n\nexport { Nation as default };","map":{"version":3,"sources":["C:/Users/Alex/Desktop/empatica/empatica_delivery/client/components/Nation.js"],"names":["React","urls","dt","Nation","props","state","loading","data","downloads","map","download","push","latitude","longitude","promises","Promise","all","url","fetch","then","results","r","json","res","t","address_components","long_name","setState","result","Map","item","has","set","count","countNation","dataNat","nationDownload","it","Component"],"mappings":"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","sourcesContent":["/************************************\r\n * Component in charge of recovering from the longitude and latitude the country using\r\n * the GoogleMaps API. Subsequently these data are rendered via a table \r\n */\r\n\r\nimport React from 'react'\r\n\r\nconst urls = []; //  variable used to load the urls to execute\r\nconst dt = []; // auxiliari variable\r\n\r\nexport default class Nation extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = {         \r\n                        loading: true,\r\n                        data: []\r\n                    };\r\n    }\r\n\r\ncomponentDidMount() \r\n{\r\n    //Create the query for each pair of longitude&latitude\r\n    this.props.data.downloads.map(download => (\r\n        // Query too Goolgle Maps API in order to get the nation\r\n        urls.push(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+ download.latitude + \",\"+ download.longitude + \"&result_type=country&key=AIzaSyD8g2ang82_R7aQG8AdVAJg4jkQ52-cp4E\")\r\n    ))  \r\n\r\n    //Send request to the API\r\n    var promises = Promise.all(urls.map(url => (\r\n        fetch(url)\r\n    )));\r\n\r\n    //Get results of the API and save the values\r\n    promises\r\n        .then((results) =>\r\n            Promise.all(results.map(r => r.json()))\r\n        )\r\n        .then((res) =>\r\n            res.map(t =>          \r\n                {dt.push(t.results[0].address_components[0].long_name)}                \r\n            ))\r\n            .then(this.setState({loading: false, data: dt}))\r\n}\r\n\r\nrender()\r\n{       \r\n    // If the data are still not fetched  \r\n    if (this.state.loading) \r\n    {return <div>loading...</div>; }\r\n\r\n\r\n    // Identification of the distinct nations related with the downloads //\r\n    const result = [];\r\n    const map = new Map();\r\n    for (const item of this.state.data) {\r\n        if(!map.has(item)){\r\n            map.set(item, true);   \r\n            result.push(\r\n                item\r\n            );\r\n        }\r\n    }\r\n\r\n    // Counting the number of downloads for each country //\r\n    let count = 0;\r\n    let countNation = 0;\r\n    let dataNat = this.state.data;\r\n    let nationDownload = result.map(function(item)\r\n    {\r\n        count = 0;\r\n        for(const it in dataNat)\r\n        {\r\n            if(item == dataNat[it])\r\n            {count = count + 1;}\r\n        }\r\n        countNation = countNation + 1;\r\n\r\n    return (    // New row in the table that is rendered\r\n                <tr>\r\n                    <th scope=\"row\">{countNation}</th>\r\n                    <td>{item}</td>\r\n                    <td>{count}</td>\r\n                </tr>\r\n            )    \r\n    })\r\n\r\n    return (\r\n        \r\n        // Render of the table with the nations involved and the downloads per each nation\r\n        <table id=\"dtBasicExample\" className=\"table table-striped table-bordered table-sm\">\r\n        <thead>\r\n        <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Nation</th>\r\n            <th scope=\"col\">Downloads</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n                {nationDownload}\r\n        </tbody>\r\n        </table>\r\n\r\n\r\n    )\r\n}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}